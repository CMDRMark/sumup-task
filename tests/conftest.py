from http import HTTPStatus

import pytest
import os

from api_clients_and_models.models.bank_account_model import BankAccountCreationInfoModel
from api_clients_and_models.models.signup_models import RegistrationResponse
from api_clients_and_models.models.user_model import User
from utils.custom_asserts import validate_response_schema
from utils.signup_utils import get_random_username, get_random_password
from utils.user_data_manager import load_users, save_new_user, select_random_user
from utils.logger import logger
from api_clients_and_models.auth_api_client import AuthAPIClient
from api_clients_and_models.bank_account_manager_api_client import BAMAPIClient


@pytest.fixture(scope="session")
def auth_client(get_base_url):
    """
    A pytest fixture to create an instance of the AuthAPIClient.

    Args:
        get_base_url: A fixture to retrieve the base URL for the API.

    Returns:
        AuthAPIClient: An instance of the authentication API client.
    """
    return AuthAPIClient(base_url=get_base_url)


@pytest.fixture(scope="session")
def bank_account_api_client(get_base_url):
    """
    A pytest fixture to create an instance of the BAMAPIClient.

    Args:
        get_base_url: A fixture to retrieve the base URL for the API.

    Returns:
        BAMAPIClient: An instance of the bank account manager API client.
    """
    return BAMAPIClient(base_url=get_base_url)


@pytest.fixture(scope="function")
def get_random_existing_registered_user(get_env, register_new_user) -> User:
    """
    A pytest fixture to retrieve a random existing registered user.
    If user file does not exist, it registers a new user, so that tests won't fail.

    Args:
        get_env: A fixture to retrieve the current environment.

    Returns:
        User: A randomly selected registered user object without requiring a bank account.
    """
    users = load_users(env=get_env)

    user = register_new_user if not users else select_random_user(users, must_have_bank_account=False)

    logger.info(
        f"Using existing registered user. "
        f"username: {user.username}, "
        f"password: {'***' if os.getenv('HIDE_SECRETS') else user.password}"
    )
    return user


@pytest.fixture(scope="function")
def get_registered_user_with_bank_account(get_env) -> User:
    """
    A pytest fixture to retrieve a random registered user with at least one bank account.

    Args:
        get_env: A fixture to retrieve the current environment.

    Returns:
        User: A randomly selected registered user object with a bank account.
    """
    users = load_users(env=get_env)
    return select_random_user(users, must_have_bank_account=True)


@pytest.fixture
def make_user():
    """
    A pytest fixture to create a new user object.

    This fixture provides a function to generate a new user with optional
    username and password. If no username or password is provided, random
    values will be generated.

    Returns:
        function: A function that creates a User object with the specified
                  or autogenerated credentials.
    """
    def _make_user(username=None, password=None, autogen=True):
        """
        Creates a User object with the given or autogenerated credentials.

        Args:
            username (str, optional): The username for the user. Defaults to None.
            password (str, optional): The password for the user. Defaults to None.
            autogen (bool, optional): Whether to generate random credentials if
                                      username or password is not provided. Defaults to True.

        Returns:
            User: A User object with the specified or autogenerated credentials.
        """
        if autogen:
            user = User(
                username=username or get_random_username(),
                password=password or get_random_password()
            )
        else:
            user = User(
                username=username,
                password=password
            )
        if password and username:
            logger.info(f"Using provided user. 'username: {user.username}, "
                        f"password: {user.password if os.getenv('HIDE_SECRETS') else '***'}")
        else:
            logger.info(f"Generated new user credentials. 'username: {user.username}, "
                        f"password: {user.password if os.getenv('HIDE_SECRETS') else '***'}")
        return user
    return _make_user


@pytest.fixture(scope="function")
def register_new_user(auth_client, make_user) -> User:
    """
    A pytest fixture to register a new user using the authentication client.

    Args:
        auth_client: The authentication client used to register the user.
        make_user: A fixture to create a new user object.

    Returns:
        User: The newly registered user object.
    """
    user = make_user()
    response = auth_client.register_user_request(user=user)

    signup_response = validate_response_schema(model=RegistrationResponse,
                                               response=response,
                                               expected_status=HTTPStatus.OK)
    assert signup_response.username == user.username

    return user


@pytest.fixture(scope="function")
def get_new_registered_and_logged_in_user(register_new_user, auth_client) -> User:
    """
    A pytest fixture to create a new user, register them, and log them in.

    Args:
        register_new_user: A fixture to register a new user.
        auth_client: The authentication client used to log in the user.

    Returns:
        User: The newly registered and logged-in user object.
    """
    user = register_new_user
    auth_client.set_auth_token_to_user(user=user)

    return user


@pytest.fixture(scope="function")
def save_registered_user(request, get_env, save_registered_users_flag):
    """
    A pytest fixture to save a user automatically during teardown,
    if the `--save-registered-user` flag is passed as a pytest CLI parameter.

    Args:
        request: The pytest request object, used to add a finalizer.
        get_env: A fixture to retrieve the current environment.
        save_registered_users_flag (bool): A flag indicating whether to save registered users.

    Returns:
        function: A function that accepts a User object and prepares it for saving.
    """
    container = {"user": None}

    def _set_user(user: User):
        """
        Prepares a User object for saving by converting its bank account creation info
        to a dictionary if necessary.

        Args:
            user (User): The user object to prepare for saving.
        """
        if isinstance(user.bank_account_creation_info, BankAccountCreationInfoModel):
            user.bank_account_creation_info = user.bank_account_creation_info.to_dict()
        container["user"] = {str(user.id): user.to_dict()}

    def fin():
        """
        Finalizer function to save the user if the `--save-registered-user` flag is set
        and a user has been prepared for saving.
        """
        if save_registered_users_flag and container["user"]:
            save_new_user(container["user"], get_env)

    request.addfinalizer(fin)
    return _set_user